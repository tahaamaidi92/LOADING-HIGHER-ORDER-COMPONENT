{"version":3,"sources":["components/movies.js","components/HOC.js","App.js","serviceWorker.js","index.js"],"names":["Movies","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","List","id","name","rate","image","react_default","a","createElement","className","map","el","i","src","Component","HOC","fetchData","setState","loading","setTimeout","style","marginTop","onClick","disabled","class","marginRight","movies","App","components_HOC","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAgDeA,oBA7CX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACTQ,MAAM,CACPC,KAAM,CACF,CACEC,GAAI,SACJC,KAAM,cACNC,KAAM,iCACNC,MACE,gGAEJ,CACEH,GAAI,SACJC,KAAM,UACNC,KAAM,iCACNC,MAAO,4DAET,CACEH,GAAI,SACJC,KAAM,SACNC,KAAM,iCACNC,MACE,6EAtBUZ,wEA6Bd,OACIa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,yBACCZ,KAAKI,MAAMC,KAAKS,IAAI,SAACC,EAAIC,GAAL,OACnBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,mBAAWG,EAAGT,GAAd,KACAI,EAAAC,EAAAC,cAAA,qBAAaG,EAAGR,KAAhB,KACAG,EAAAC,EAAAC,cAAA,uBAAeG,EAAGP,KAAlB,KACAE,EAAAC,EAAAC,cAAA,OAAKK,IAAKF,EAAGN,mBAtCRS,cCiCNC,cA/BX,SAAAA,EAAYvB,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmB,IACdtB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqB,GAAAhB,KAAAH,KAAMJ,KAKVwB,UAAY,WACRvB,EAAKwB,SAAS,CAAEC,SAAS,IAGzBC,WAAW,WACT1B,EAAKwB,SAAS,CAAEC,SAAS,KACxB,MAVHzB,EAAKO,MAAM,CACPkB,SAAS,GAHCzB,wEAcT,IACGyB,EAAYtB,KAAKI,MAAjBkB,QACR,OACIZ,EAAAC,EAAAC,cAAA,OAAKY,MAAO,CAAEC,UAAW,SACzBf,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASa,QAAS1B,KAAKoB,UAAWO,SAAUL,GAC3DA,GACCZ,EAAAC,EAAAC,cAAA,KAAGgB,MAAM,kBAAkBJ,MAAO,CAAEK,YAAa,SAElDP,GAAWZ,EAAAC,EAAAC,cAAA,yCACZU,GAAWZ,EAAAC,EAAAC,cAAA,0CAEXU,GAAWZ,EAAAC,EAAAC,cAAA,eAAMF,EAAAC,EAAAC,cAACkB,EAAD,MAAN,aA1BPZ,aCWHa,mLARX,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACoB,EAAD,cALYd,aCSEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c699bce9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css'\r\nclass Movies extends Component {\r\n    constructor(props){\r\n        super(props)\r\nthis.state={\r\n    List :[\r\n        {\r\n          id: \"Movie1\",\r\n          name: \"The Lullaby\",\r\n          rate: \"★★★★☆\",\r\n          image:\r\n            \"https://horrornews.net/wp-content/uploads/2018/02/The-Lullaby-2018-movie-Darrell-Roodt-2.jpg\"\r\n        },\r\n        {\r\n          id: \"Movie2\",\r\n          name: \"Laraide\",\r\n          rate: \"★★★☆☆\",\r\n          image: \"http://www.laraider.com/films/filmtr3/promo/affiche3.jpg\"\r\n        },\r\n        {\r\n          id: \"Movie3\",\r\n          name: \"Braven\",\r\n          rate: \"★★☆☆☆\",\r\n          image:\r\n            \"https://media.senscritique.com/media/000017581368/source_big/Braven.jpg\"\r\n        }\r\n      ]\r\n}\r\n        \r\n    }\r\n    render() { \r\n        return ( \r\n            <div className=\"App1\">\r\n            <h1>MOVIES LIST</h1>\r\n            {this.state.List.map((el, i) => (\r\n              <div className=\"movies\">\r\n                <h4> Id : {el.id} </h4>\r\n                <h4> Name : {el.name} </h4>\r\n                <h4> Rating : {el.rate} </h4>\r\n                <img src={el.image} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Movies;","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport Movies from './movies.js'\r\nclass HOC extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            loading: false\r\n        }\r\n    }\r\n    fetchData = () => {\r\n        this.setState({ loading: true });\r\n    \r\n        //Faking API call here\r\n        setTimeout(() => {\r\n          this.setState({ loading: false });\r\n        }, 3000);\r\n      };\r\n    render() { \r\n        const { loading } = this.state;\r\n        return ( \r\n            <div style={{ marginTop: \"60px\" }}>\r\n            <button className=\"button\" onClick={this.fetchData} disabled={loading}>\r\n              {loading && (\r\n                <i class=\"fas fa-sync-alt\" style={{ marginRight: \"5px\" }}></i>\r\n              )}\r\n              {loading && <span>Loading Data from Server</span>}\r\n            {!loading && <span> Fetch Data from Server </span>}\r\n            </button>\r\n            {!loading && <div> <Movies/> </div>}\r\n          </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default HOC;","import React, { Component } from 'react';\nimport './App.css';\nimport HOC from './components/HOC'\nclass App extends Component {\n\n  render() { \n    return ( \n      <div className=\"App\">\n      <HOC/>\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}